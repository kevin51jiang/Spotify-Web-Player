{"version":3,"sources":["record.webp","default.js","config.js","Control.js","Player.js","hash.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","default_item","album","images","url","record","name","artists","duration_ms","scopes","Control","props","stepBack","togglePlay","stepForward","className","onClick","this","bind","is_playing","Component","Player","state","backgroundStyles","backgroundImage","item","progressBarStyles","width","progress_ms","style","alt","reduce","accum","artist","slice","src","React","hash","window","location","substring","split","initial","parts","decodeURIComponent","BASE_API","App","token","getCurrentlyPlaying","tick","axios","post","headers","catch","e","console","log","put","params","position_ms","setState","get","then","res","data","Math","abs","err","_token","access_token","barInterval","setInterval","updateBar","interval","clearInterval","href","join","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.02f0e914.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/record.6264d8cb.webp\";","import record from \"./record.webp\"\r\n\r\nexport const default_item = {\r\n    album: {\r\n        images: [{ url: record }]\r\n    },\r\n    name: \"Title\",\r\n    artists: [{ name: \"No Artist\" }],\r\n    duration_ms: 0\r\n}\r\n","export const authEndpoint = 'https://accounts.spotify.com/authorize';\r\n\r\nexport const clientId = \"316e898df20d4a0d8c486499c9dc7abf\";\r\n// export const redirectUri = \"http://localhost:3000/redirect\";\r\nexport const redirectUri = \"http://kevinjiang.ca/Spotify-Web-Player\"\r\nexport const scopes = [\r\n    \"user-top-read\",\r\n    \"user-read-currently-playing\",\r\n    \"user-modify-playback-state\",\r\n];\r\n\r\n\r\nexport const barUpdateincrement = 500; // time between progressbar updates (ms)\r\nexport const infoUpdateIncrement = 7000; // time between every poll to Spotify server (ms)","import React, { Component } from 'react';\r\n\r\nimport { MdSkipPrevious, MdPlayCircleOutline, MdPauseCircleOutline, MdSkipNext } from 'react-icons/md';\r\n\r\nimport './Control.css';\r\n\r\nclass Control extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    stepBack = () => {\r\n        this.props.stepBack();\r\n    }\r\n\r\n    togglePlay = () => {\r\n        this.props.togglePlay();\r\n    }\r\n\r\n    stepForward = () => {\r\n        this.props.stepForward();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"controller\">\r\n                <button onClick={this.stepBack.bind(this)}><MdSkipPrevious /></button>\r\n                <button onClick={this.togglePlay.bind(this)} className=\"centerButton\"> {this.props.is_playing ? <MdPauseCircleOutline /> : <MdPlayCircleOutline />} </button>\r\n                <button onClick={this.stepForward.bind(this)}><MdSkipNext /></button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;","import React from 'react';\r\n\r\n\r\nimport \"./Player.css\";\r\nimport Control from './Control';\r\n\r\n\r\nclass Player extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n\r\n    const backgroundStyles = {\r\n      backgroundImage: `url(${this.props.item.album.images[0].url})`\r\n    };\r\n\r\n    const progressBarStyles = {\r\n      width: (this.props.progress_ms * 100 / this.props.item.duration_ms) + \"%\"\r\n    };\r\n\r\n    const artistsToString = () => {\r\n      return (`${this.props.item.artists.reduce((accum, artist) => accum + artist.name + ', ', '')}`).slice(0, -2)\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"main-wrapper\">\r\n          <div className=\"background\" style={backgroundStyles} />{\" \"}\r\n          <div className=\"now-playing__img\">\r\n            <img alt={this.props.item.album.artists ? (\r\n              `Now playing ${this.props.item.name} by ${artistsToString()}`.slice(0, -2)\r\n            ) : (\r\n                \"Nothing currently playing\"\r\n              )} src={this.props.item.album.images[0].url} />\r\n          </div>\r\n          <div className=\"now-playing__side\">\r\n            <div className=\"now-playing__name\">{this.props.item.name}</div>\r\n            <div className=\"now-playing__artist\">\r\n\r\n              {(`${this.props.item.artists.reduce((accum, artist) => accum + artist.name + ', ', '')}`).slice(0, -2)}\r\n            </div>\r\n            <div className=\"now-playing__status\">\r\n              {this.props.is_playing ? \"Playing\" : \"Paused\"}\r\n            </div>\r\n            <div className=\"progress\">\r\n              <div\r\n                className=\"progress__bar\"\r\n                style={progressBarStyles}\r\n              />\r\n\r\n            </div>\r\n            <Control\r\n              className=\"control\"\r\n              is_playing={this.props.is_playing}\r\n              stepBack={this.props.stepBack.bind(this)}\r\n              stepForward={this.props.stepForward.bind(this)}\r\n              togglePlay={this.props.togglePlay.bind(this)}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","\r\nconst hash = window.location.hash\r\n.substring(1)\r\n.split(\"&\")\r\n.reduce((initial, item) => {\r\n    if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n}, {});\r\n\r\n\r\nexport default hash;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport { default_item } from './default';\nimport { authEndpoint, clientId, redirectUri, scopes, barUpdateincrement, infoUpdateIncrement } from './config';\nimport Player from \"./Player\";\nimport hash from \"./hash\";\n\nimport './App.css';\n\nwindow.location.hash = \"\";\n\nconst BASE_API = \"https://api.spotify.com/v1/me/player/\";\n\nclass App extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n\n            token: null,\n            item: default_item,\n            progress_ms: 0\n        };\n\n        this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n        this.tick = this.tick.bind(this);\n    }\n\n    /**\n     * Send POST request to move to previous song\n     * todo: if the user is >10% through song, move song to beginning, but don't go to previous song\n     */\n    async stepBack() {\n        const cutoff = 20000; // time before seeking to start instead of going to previous track (ms)\n\n        if (this.state.progress_ms < cutoff) { // go to previous track\n            await axios.post(`${BASE_API}previous`,\n                {},\n                { headers: { 'Authorization': \"Bearer \" + this.state.token } })\n                .catch(e => console.log(e));\n        } else { // go to start of current track\n            await axios.put(`${BASE_API}seek`,\n                {},\n                {\n                    headers: { 'Authorization': \"Bearer \" + this.state.token },\n                    params: { position_ms: 0 }\n                })\n                .catch(e => console.log(e));\n        }\n\n\n    }\n\n    /**\n     * Send POST request to move to next song\n     */\n    async stepForward() {\n        await axios.post(`${BASE_API}next`,\n            {},\n            { headers: { 'Authorization': \"Bearer \" + this.state.token } })\n            .catch(e => console.log(e));\n    }\n\n    /**\n     * Send PUT request to pause/play\n     */\n    async togglePlay() {\n        if (this.state.is_playing) { //if playing, then pause\n            await axios.put(`${BASE_API}pause`,\n                {},\n                { headers: { 'Authorization': \"Bearer \" + this.state.token } })\n                .catch(e => console.log(e));\n        } else { //if paused, then play\n            await axios.put(`${BASE_API}play`,\n                {},\n                { headers: { 'Authorization': \"Bearer \" + this.state.token } })\n                .catch(e => console.log(e));\n        }\n\n        this.setState({ is_playing: !this.state.is_playing }); //invert is_playing\n\n    }\n\n    async getCurrentlyPlaying(token) {\n        console.log(\"Getting current song\")\n\n        await axios.get(BASE_API,\n            { headers: { 'Authorization': \"Bearer \" + token } })\n            .then(res => {\n                if (res.data) {\n                    this.setState({\n                        item: res.data.item,\n                        is_playing: res.data.is_playing\n                    });\n                    // only update if the counter is greater than 2 seconds off\n                    // so that bar doesn't jump back and forth often \n                    if (Math.abs(this.state.progress_ms - res.data.progress_ms) > 2000) {\n                        this.setState({\n                            progress_ms: res.data.progress_ms\n                        });\n                    }\n                } else {// if Spotify doesn't think you're listening to a song\n                    this.setState({\n                        item: default_item,\n                        progress_ms: 0\n                    })\n                }\n            })\n            .catch(err => console.log(err));\n    }\n\n    componentDidMount() {\n        let _token = hash.access_token;\n        if (_token) {\n            this.setState({\n                token: _token\n            });\n        }\n        this.getCurrentlyPlaying(_token);\n\n        this.barInterval = setInterval(() => this.updateBar(), barUpdateincrement);\n        this.interval = setInterval(() => this.tick(), infoUpdateIncrement);\n    }\n\n\n    updateBar() {\n        if (this.state.token && this.state.is_playing) {\n            this.setState({\n                progress_ms: this.state.progress_ms + barUpdateincrement\n            });\n\n        }\n    }\n\n    tick() {\n        if (this.state.token) {\n            this.getCurrentlyPlaying(this.state.token);\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {!this.state.token && (\n                        <>\n                            <a\n                                className=\"btn btn--loginApp-link\"\n                                href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                                    \"%20\"\n                                )}&response_type=token&show_dialog=true`}\n                            >\n                                Login to Spotify\n                            </a>\n                            \n                            <span>You may or may not regret it</span>\n                        </>\n                    )}\n                    {this.state.token && (\n                        <Player\n                            item={this.state.item}\n                            is_playing={this.state.is_playing}\n                            progress_ms={this.state.progress_ms}\n                            stepBack={this.stepBack.bind(this)}\n                            stepForward={this.stepForward.bind(this)}\n                            togglePlay={this.togglePlay.bind(this)}\n                        />\n                    )}\n                </header>\n            </div>\n        )\n    }\n\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}